{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente","error"],"mappings":";;;;;;IAAMA,iB;AAEF,iCAAc;AAAA;;AACV,aAAKC,KAAL,GAAa,IAAIC,WAAJ,EAAb;AACH;;;;mDAE0B;AACvB,mBAAO,KAAKD,KAAL,CACFE,GADE,CACE,oBADF,EAEFC,IAFE,CAEG,uBAAe;AACjB;AACA,uBAAOC,YAAYC,GAAZ,CAAgB;AAAA,2BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iBAAhB,CAAP;AACH,aALE,EAMFC,KANE,CAMI,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACH,aATE,CAAP;AAUH;;;2DAEkC;AAC/B,mBAAO,KAAKhB,KAAL,CACFE,GADE,CACE,sBADF,EAEFC,IAFE,CAEG,uBAAe;AACjB;AACA,uBAAOC,YAAYC,GAAZ,CAAgB;AAAA,2BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iBAAhB,CAAP;AACH,aALE,EAMFC,KANE,CAMI,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACH,aATE,CAAP;AAUH;;;4DAEmC;AAChC,mBAAO,KAAKhB,KAAL,CACFE,GADE,CACE,uBADF,EAEFC,IAFE,CAEG,uBAAe;AACjB;AACA,uBAAOC,YAAYC,GAAZ,CAAgB;AAAA,2BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iBAAhB,CAAP;AACH,aALE,EAMFC,KANE,CAMI,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACH,aATE,CAAP;AAUH;;;2CAEkB;AACf,mBAAOC,QAAQC,GAAR,CAAY,CACf,KAAKC,wBAAL,EADe,EAEf,KAAKC,gCAAL,EAFe,EAGf,KAAKC,iCAAL,EAHe,CAAZ,EAIJlB,IAJI,CAIC,oBAAY;AAChB,oBAAIC,cAAckB,SACbC,MADa,CACN,UAACC,KAAD,EAAQC,OAAR;AAAA,2BAAoBD,MAAME,MAAN,CAAaD,OAAb,CAApB;AAAA,iBADM,EACqC,EADrC,CAAlB;AAEA,uBAAOrB,WAAP;AACH,aARM,EAQJQ,KARI,CAQE,gBAAQ;AACb,sBAAM,IAAII,KAAJ,CAAUD,IAAV,CAAN;AACH,aAVM,CAAP;AAWH;;;iCAEQY,U,EAAY;AACjB,mBAAOC,kBACFC,aADE,GAEF1B,IAFE,CAEG;AAAA,uBAAc,IAAI2B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGF5B,IAHE,CAGG;AAAA,uBAAO6B,IAAIC,QAAJ,CAAaN,UAAb,CAAP;AAAA,aAHH,EAIFxB,IAJE,CAIG;AAAA,uBAAM,mCAAN;AAAA,aAJH,EAKFS,KALE,CAKI,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACH,aARE,CAAP;AASH;;;gCAEO;AACJ,mBAAOY,kBACFC,aADE,GAEF1B,IAFE,CAEG;AAAA,uBAAc,IAAI2B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGF5B,IAHE,CAGG;AAAA,uBAAO6B,IAAIE,UAAJ,EAAP;AAAA,aAHH,EAIFtB,KAJE,CAII,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH,aAPE,CAAP;AAQH;;;gCAEO;AACJ,mBAAOY,kBACFC,aADE,GAEF1B,IAFE,CAEG;AAAA,uBAAc,IAAI2B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGF5B,IAHE,CAGG;AAAA,uBAAO6B,IAAIG,UAAJ,EAAP;AAAA,aAHH,EAIFhC,IAJE,CAIG;AAAA,uBAAY,kCAAZ;AAAA,aAJH,EAKFS,KALE,CAKI,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH,aARE,CAAP;AASH;;;gCAEOoB,U,EAAY;AAChB,mBAAO,KAAKC,gBAAL,GACFlC,IADE,CACG;AAAA,uBACFC,YAAYkC,MAAZ,CAAmB;AAAA,2BACf,CAACF,WAAWG,IAAX,CAAgB;AAAA,+BACbC,KAAKC,SAAL,CAAed,UAAf,KAA8Ba,KAAKC,SAAL,CAAeC,mBAAf,CADjB;AAAA,qBAAhB,CADc;AAAA,iBAAnB,CADE;AAAA,aADH,EAMF9B,KANE,CAMI,iBAAS;AACZC,wBAAQC,GAAR,CAAY6B,KAAZ;AACA,sBAAM,IAAI3B,KAAJ,CAAU,uCAAV,CAAN;AACH,aATE,CAAP;AAUH","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n        return this._http\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                // console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana');\n            });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n        return this._http\n            .get('negociacoes/anterior')\n            .then(negociacoes => {\n                // console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana anterior');\n            });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(negociacoes => {\n                // console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\n            });\n    }\n\n    obterNegociacoes() {\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), []);\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    }\n\n    cadastra(negociacao) {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possivel adicionar a negociação');\n            })\n    }\n\n    lista() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações');\n            });\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(mensagem => 'Negociações apagadas com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações');\n            });\n    }\n\n    importa(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\n            )\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível importar negociações');\n            });\n    }\n}"]}