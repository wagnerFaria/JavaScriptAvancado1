{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAY;AAC3B,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAKH,iBAvBM,CAAP;AAwBH;AA/BL;AAAA;AAAA,yCAiCwBrB,UAjCxB,EAiCoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACjDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAHD;AAIH;AAtCL;AAAA;AAAA,8CAwC6B;AACrB,oBAAI5B,UAAJ,EAAgB;AACZC;AACAD,iCAAa,IAAb;AACH;AACJ;AA7CL;;AAAA;AAAA;AA+CH,CAvDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\n    const stores = ['negociacoes'];\n    const version = 3;\n    const dbName = 'aluraframe';\n\n    var connection = null;\n    var close = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Error('Não é possivel criar instancias de ConnectionFactory');\n        }\n\n        static getConnection() {\n            return new Promise((resolve, reject) => {\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createStore(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n                    if (!connection) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function () {\n                            throw new Error('Você não pode fechar diretamente a conexão');\n                        };\n                    };\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n\n            });\n        }\n\n        static _createStore(connection) {\n            stores.forEach(store => {\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n                connection.createObjectStore(store, { autoIncrement: true });\n            })\n        }\n\n        static closeConnection() {\n            if (connection) {\n                close();\n                connection = null;\n            }\n        }\n    }\n})()"]}