{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,YAAf;;AAEA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;AAET,iCAAc;AAAA;;AACV,cAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;wCAEsB;AACnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8B,aAAK;AAC/BT,sCAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,iBAFD;;AAIAR,4BAAYS,SAAZ,GAAwB,aAAK;AACzB,wBAAI,CAAChB,UAAL,EAAiB;AACbA,qCAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,gCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAY;AAC3B,kCAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,yBAFD;AAGH;AACDE,4BAAQL,UAAR;AACH,iBATD;;AAWAO,4BAAYW,OAAZ,GAAsB,aAAK;AACvBC,4BAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,2BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAHD;AAKH,aAvBM,CAAP;AAwBH;;;qCAEmBtB,U,EAAY;AAC5BH,mBAAO0B,OAAP,CAAe,iBAAS;AACpB,oBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACjD1B,2BAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,aAHD;AAIH;;;0CAEwB;AACrB,gBAAI7B,UAAJ,EAAgB;AACZC;AACAD,6BAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 3;\nconst dbName = 'aluraframe';\n\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error('Não é possivel criar instancias de ConnectionFactory');\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStore(e.target.result);\n            };\n\n            openRequest.onsuccess = e => {\n                if (!connection) {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function () {\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    };\n                };\n                resolve(connection);\n            };\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            };\n\n        });\n    }\n\n    static _createStore(connection) {\n        stores.forEach(store => {\n            if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n            connection.createObjectStore(store, { autoIncrement: true });\n        })\n    }\n\n    static closeConnection() {\n        if (connection) {\n            close();\n            connection = null;\n        }\n    }\n}"]}